import{_ as e,c as o,o as t,a4 as n}from"./chunks/framework.CpVK_f0P.js";const f=JSON.parse('{"title":"微前端","description":"","frontmatter":{"title":"微前端"},"headers":[],"relativePath":"qa/fe/micro-fe.md","filePath":"qa/fe/micro-fe.md"}'),a={name:"qa/fe/micro-fe.md"},r=n('<ol><li><a href="#what-challenges-and-opportunities-does-micro-frontend-architecture-bring-to-front-end-development-and-how-do-you-overcome-these-challenges">What challenges and opportunities does micro-frontend architecture bring to front-end development, and how do you overcome these challenges?</a></li></ol><h2 id="what-challenges-and-opportunities-does-micro-frontend-architecture-bring-to-front-end-development-and-how-do-you-overcome-these-challenges" tabindex="-1">What challenges and opportunities does micro-frontend architecture bring to front-end development, and how do you overcome these challenges? <a class="header-anchor" href="#what-challenges-and-opportunities-does-micro-frontend-architecture-bring-to-front-end-development-and-how-do-you-overcome-these-challenges" aria-label="Permalink to &quot;What challenges and opportunities does micro-frontend architecture bring to front-end development, and how do you overcome these challenges?&quot;">​</a></h2><p>You know, I think the main benefit of micro-frontends is that they let you connect different applications together. Like, if you need to integrate some legacy apps into your current system, you can use micro-frontends instead of having to rewrite everything from scratch.</p><p>But yeah, there are definitely some challenges to deal with. You&#39;ve got things like communication between modules, data sharing, and style isolation to figure out. Plus, it can be pretty complicated to set up and use. Actually, if you&#39;re building a brand new application, I wouldn&#39;t really recommend using micro-frontends - it&#39;s better to avoid potential headaches.</p><p>These days, I mainly use some well-established micro-frontend frameworks to handle these issues, like qiankun and micro-app. They work pretty well and take care of a lot of the common problems.</p><details><summary>查看中文</summary> 微前端架构给前端开发带来了哪些挑战和机遇？您是如何克服这些挑战的？ <p>我觉得微前端最主要的好处就是可以把不同的应用连接在一起。假如现在需要把一些老应用集成到当前应用里，那么就可以使用微前端了，而不是把老应用都重写一遍。但是微前端存在不少要解决的问题，例如模块之间的通信、数据共享、样式隔离等，并且使用起来比较麻烦。如果是全新应用，就没有必要上微前端了，避免踩坑。我目前主要使用一些比较成熟的微前端框架来解决这些问题，例如 qiankun、micro-app，使用效果还不错。</p></details>',6),i=[r];function s(c,d,l,h,m,p){return t(),o("div",null,i)}const g=e(a,[["render",s]]);export{f as __pageData,g as default};
