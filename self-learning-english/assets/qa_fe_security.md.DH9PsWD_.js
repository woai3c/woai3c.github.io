import{_ as e,c as t,o,a4 as s}from"./chunks/framework.CpVK_f0P.js";const y=JSON.parse('{"title":"安全","description":"","frontmatter":{"title":"安全"},"headers":[],"relativePath":"qa/fe/security.md","filePath":"qa/fe/security.md"}'),a={name:"qa/fe/security.md"},r=s('<ol><li><a href="#how-do-you-view-front-end-security-can-you-share-some-of-the-security-best-practices-you-have-implemented-or-consider-important">How do you view front-end security? Can you share some of the security best practices you have implemented or consider important?</a></li></ol><h2 id="how-do-you-view-front-end-security-can-you-share-some-of-the-security-best-practices-you-have-implemented-or-consider-important" tabindex="-1">How do you view front-end security? Can you share some of the security best practices you have implemented or consider important? <a class="header-anchor" href="#how-do-you-view-front-end-security-can-you-share-some-of-the-security-best-practices-you-have-implemented-or-consider-important" aria-label="Permalink to &quot;How do you view front-end security? Can you share some of the security best practices you have implemented or consider important?&quot;">​</a></h2><p>You know, front-end pages are actually quite vulnerable to attacks - things like XSS and CSRF attacks can be pretty common. But there are several strategies we can use to handle these security issues.</p><p>For example, deploying websites on HTTPS can prevent man-in-the-middle attacks. Also, we should never directly use user input in our front-end code - instead, we need to filter and escape that input to prevent XSS attacks.</p><p>Another important practice is adding tokens to sensitive operations to prevent CSRF attacks. And using CSP (Content Security Policy) can help limit what resources a website can load, which is another way to prevent XSS attacks.</p><details><summary>查看中文</summary> 您如何看待前端安全性？能否分享一些您实施的或认为重要的前端安全最佳实践？ <p>前端页面其实很脆弱，很容易被攻击，比如 xss 攻击、csrf 攻击。我们可以通过一些策略来解决这些问题，例如网站要部署在 https，这样可以防止中间人攻击。然后在前端代码中不要直接使用用户输入的数据，要对用户输入的数据进行过滤和转义，这样可以防止 xss 攻击。还有要对一些敏感操作加上 token，这样可以防止 csrf 攻击。还有使用 csp，可以限制网站加载的资源，防止 xss 攻击。</p></details>',6),i=[r];function n(c,u,d,p,h,m){return o(),t("div",null,i)}const f=e(a,[["render",n]]);export{y as __pageData,f as default};
