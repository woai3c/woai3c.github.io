import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.CpVK_f0P.js";const m=JSON.parse('{"title":"其他","description":"","frontmatter":{"title":"其他"},"headers":[],"relativePath":"qa/fe/other.md","filePath":"qa/fe/other.md"}'),n={name:"qa/fe/other.md"},s=o('<ol><li><a href="#considering-future-technological-trends-how-do-you-think-front-end-development-will-evolve-how-do-you-plan-to-maintain-and-enhance-your-competitiveness-in-this-rapidly-changing-field">Considering future technological trends, how do you think front-end development will evolve? How do you plan to maintain and enhance your competitiveness in this rapidly changing field?</a></li><li><a href="#please-share-your-reasons-for-choosing-nestjs-as-a-technology-stack-and-the-specific-benefits-it-has-brought-to-your-projects">Please share your reasons for choosing NestJS as a technology stack and the specific benefits it has brought to your projects.</a></li><li><a href="#you-have-full-stack-development-experience-with-vue-and-react-what-are-the-advantages-and-disadvantages-of-these-frameworks-in-practice">You have full-stack development experience with Vue and React. What are the advantages and disadvantages of these frameworks in practice?</a></li></ol><h2 id="considering-future-technological-trends-how-do-you-think-front-end-development-will-evolve-how-do-you-plan-to-maintain-and-enhance-your-competitiveness-in-this-rapidly-changing-field" tabindex="-1">Considering future technological trends, how do you think front-end development will evolve? How do you plan to maintain and enhance your competitiveness in this rapidly changing field? <a class="header-anchor" href="#considering-future-technological-trends-how-do-you-think-front-end-development-will-evolve-how-do-you-plan-to-maintain-and-enhance-your-competitiveness-in-this-rapidly-changing-field" aria-label="Permalink to &quot;Considering future technological trends, how do you think front-end development will evolve? How do you plan to maintain and enhance your competitiveness in this rapidly changing field?&quot;">​</a></h2><p>You know, I think future front-end infrastructure tools will probably be rewritten in Rust - things like build tools and testing tools. This should really help improve development efficiency and build speed. Also, with AI becoming such a big thing, I think front-end developers should learn about large language models to better understand AI-related services.</p><p>I believe front-end developers should aim to become full-stack developers. Like, first get really solid with front-end basics, then start learning some back-end stuff. This helps you better understand the whole project&#39;s business logic and makes you more competitive.</p><details><summary>查看中文</summary> 对于未来的技术趋势，您认为前端开发将会如何发展？您打算如何保持和增强您在这个快速变化领域的竞争力？ <p>我认为未来的前端基础设施工具都会用 rust 重写，例如构建工具、测试工具等等，这样能提高前端的开发效率和构建速度。而且未来是 AI 的时代，前端也可以学习一些大语言模型相关的知识，这样能更好的理解 AI 业务。</p><p>前端应该向全栈方向发展，把前端基础打扎实了，再学点后端知识，这样能更好的理解整个项目的业务逻辑，提高自己的竞争力。</p></details><h2 id="please-share-your-reasons-for-choosing-nestjs-as-a-technology-stack-and-the-specific-benefits-it-has-brought-to-your-projects" tabindex="-1">Please share your reasons for choosing NestJS as a technology stack and the specific benefits it has brought to your projects. <a class="header-anchor" href="#please-share-your-reasons-for-choosing-nestjs-as-a-technology-stack-and-the-specific-benefits-it-has-brought-to-your-projects" aria-label="Permalink to &quot;Please share your reasons for choosing NestJS as a technology stack and the specific benefits it has brought to your projects.&quot;">​</a></h2><p>Well, I chose NestJS mainly because it&#39;s open-source and written in JavaScript. It&#39;s got lots of features and a rich ecosystem, which makes it pretty easy for front-end developers to pick up. You know, in situations where we&#39;re short on back-end resources, front-end developers can step in and handle some back-end work too.</p><details><summary>查看中文</summary> 请分享您选择 NestJS 作为技术栈的原因以及它在项目中带来的具体好处。 <p>我选择 Nestjs 主要是因为它开源并且是用 js 写的，而且功能齐全、生态丰富，前端上手比较快。在后端资源不足的情况下，前端也可以写后端。</p></details><h2 id="you-have-full-stack-development-experience-with-vue-and-react-what-are-the-advantages-and-disadvantages-of-these-frameworks-in-practice" tabindex="-1">You have full-stack development experience with Vue and React. What are the advantages and disadvantages of these frameworks in practice? <a class="header-anchor" href="#you-have-full-stack-development-experience-with-vue-and-react-what-are-the-advantages-and-disadvantages-of-these-frameworks-in-practice" aria-label="Permalink to &quot;You have full-stack development experience with Vue and React. What are the advantages and disadvantages of these frameworks in practice?&quot;">​</a></h2><p>You know, I&#39;ve used both Vue and React for a while, and honestly, I feel like not just these two, but most reactive front-end frameworks are pretty similar to use. The main difference really lies in how they&#39;re designed and implemented under the hood.</p><p>Like, take Vue&#39;s reactivity system - it&#39;s based on dependency tracking and change notification. When you access a data property, Vue automatically adds the current dependency to that property&#39;s dependency list. Then when that property&#39;s value changes, Vue notifies all the dependencies that rely on it to update, which triggers the component to re-render.</p><p>React, on the other hand, handles reactivity through manually calling setState. This tells React that the component&#39;s state has changed, which then triggers the render method to re-render the component.</p><details><summary>查看中文</summary> 您有过 Vue 和 React 的全栈开发经验，这两个框架在实战中各有什么优缺点？ <p>Vue 和 React 我都有用过一段时间，我觉得不仅 Vue 和 React，甚至是其他的响应式前端框架用法都差不多。无非是底层的设计和实现原理不同。例如 Vue 的响应式是基于依赖收集和变更通知的。当你访问一个数据属性时，Vue 会自动将当前的依赖添加到这个属性的依赖列表中。当这个属性的值发生变化时，Vue 会通知所有依赖于这个属性的依赖进行更新，从而重新渲染组件。而 React 的响应式是基于手动调用 setState 方法来通知 React 组件状态发生了改变，然后触发 render 方法重新渲染组件。</p></details>',13),i=[s];function r(h,d,l,c,u,p){return a(),t("div",null,i)}const g=e(n,[["render",r]]);export{m as __pageData,g as default};
